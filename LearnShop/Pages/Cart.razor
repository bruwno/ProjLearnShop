@page "/carrinho"
@inject NavigationManager NavigationManager
@inject ICartService CartService
@using LearnShop.Components
@using LearnShop.Model.Sales
@using LearnShop.ClientServices.Interfaces
@implements IDisposable


<PageTitle>Carrinho</PageTitle>

<PageHeader
    Title="Carrinho"
    TextSize="2xl"
/>

<div class="container flex flex-col items-center justify-center gap-3 px-3 py-4 mx-auto">
    @if (cartItems == null || !cartItems.Any())
    {
        <div class="text-center text-lg text-gray-600">Seu carrinho est√° vazio.</div>
    }
    else
    {
        @foreach (var item in cartItems)
        {
            <div class="flex flex-row items-center justify-between w-full m-2 bg-white rounded shadow p-2">
                <ProductOnCart
                    ProductName="@item.Title"
                    ProductImage="@item.ImageUrl"
                    ProductPrice="@item.Price"
                    QuantityChanged="@(q => UpdateQuantity(item.EbookId, q))"
                />
                <button class="ml-4 px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600" @onclick="() => RemoveItem(item.EbookId)">Remover</button>
            </div>
        }
        <div class="flex items-center justify-center w-full m-1">
            <Subtotal 
                ButtonText="CONTINUAR PARA O PAGAMENTO"
                ButtonIcon="add_shopping_cart"
                OnContinue="GoToPayment"
                TotalPrice="@subtotal"
            />
        </div>
        <div class="flex items-center justify-center w-full m-1">
            <ClearCart OnClick="ClearCart" />
        </div>
    }
</div>

@code {
    private List<CartItem> cartItems = new();
    private decimal subtotal = 0m;
    private int step = 1;

    protected override async Task OnInitializedAsync()
    {
        CartService.OnCartChanged += OnCartChangedHandler;
        await ReloadCart();
    }

    private void OnCartChangedHandler()
    {
        _ = ReloadCart();
    }

    private async Task ReloadCart()
    {
        cartItems = await CartService.GetCartItemsAsync();
        subtotal = await CartService.GetCartTotalPriceAsync();
        StateHasChanged();
    }

    private async Task UpdateQuantity(long ebookId, int quantity)
    {
        await CartService.UpdateCartItemQuantityAsync(ebookId, quantity);
        await ReloadCart();
    }

    private async Task RemoveItem(long ebookId)
    {
        await CartService.RemoveFromCartAsync(ebookId);
        await ReloadCart();
    }

    private async Task ClearCart()
    {
        await CartService.ClearCartAsync();
        await ReloadCart();
    }

    private void GoToPayment()
    {
        NavigationManager.NavigateTo("/pagamento");
    }

    public void Dispose()
    {
        CartService.OnCartChanged -= OnCartChangedHandler;
    }
}

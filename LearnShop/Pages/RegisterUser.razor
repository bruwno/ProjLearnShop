@page "/cadastrar/usuario"
@using LearnShop.ClientServices.Interfaces
@using LearnShop.Dto.RequestDtos
@using LearnShop.Dto.ResponseDtos
@using LearnShop.Helpers
@using LearnShop.Model.Enums
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>Cadastrar Usuário</PageTitle>
<PageHeader Title="CADASTRAR USUÁRIO" TextSize="2xl"/>

<div class="container flex flex-col items-center justify-center gap-3 px-3 py-4 mx-auto h-full">
    <div
        class="flex flex-col items-center justify-center bg-gradient-to-br from-blue-400 to-green-600 border rounded-2xl min-w-[90vw] min-h-[70vh] md:min-w-[50vw] lg:min-w-[35vw]">
        <div class="flex flex-col justify-center rounded-2xl w-[80vw] min-h-[50vh] bg-white md:w-[40vw] lg:w-[20vw]">
            <Input Label="Nome" Type="text" Id="name" @bind-Value="UserName" Placeholder="Digite seu nome"/>

            <Input Label="CPF" Type="number-pad" Id="cpf" @bind-Value="UserCpf" Placeholder="Digite seu CPF"/>

            <Input Label="E-mail" Type="email" Id="email" @bind-Value="UserEmail" Placeholder="Digite seu E-mail"/>

            <Input Label="Senha" Type="password" Id="password" @bind-Value="UserPassword"
                   Placeholder="Digite sua senha"/>
        </div>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="@(IsSuccess ? "bg-green-100 border-green-400 text-green-700" : "bg-red-100 border-red-400 text-red-700") px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline">@Message</span>
            </div>
        }

        <div class="flex items-center justify-center bg-transparent mt-10">
            <Button Text="Cadastrar"
                    Icon="person_add"
                    TextColor="#FFF"
                    BackgroundColor="#151773"
                    HoverBackgroundColor="#23238a"
                    Size="md"
                    Width="min-w-[125px]"
                    PreventDefaultStatus=true
                    OnClick="HandleRegister"/>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery] [Parameter] public string? RedirectIfSuccess { get; set; }
    public string? Message { get; set; }
    public bool IsSuccess { get; set; } = false;
    private string? UserName;
    private string? UserCpf;
    private string? UserEmail;
    private string? UserPassword;

    private async Task HandleRegister()
    {
        if (string.IsNullOrEmpty(UserName))
        {
            Message = "É necessário informar o nome.";
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(UserCpf))
        {
            Message = "É necessário informar o CPF.";
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(UserEmail))
        {
            Message = "É necessário informar o e-mail.";
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(UserPassword))
        {
            Message = "É necessário informar a senha.";
            this.StateHasChanged();
            return;
        }

        try
        {
            await HandleRegisterAsync();
        }
        catch (Exception ex)
        {
            Message = $"Ocorreu um erro: {ex.Message}";
            this.StateHasChanged();
            return;
        }

        if (!string.IsNullOrWhiteSpace(RedirectIfSuccess))
        {
            Navigation.NavigateTo(RedirectIfSuccess, true);
            return;
        }

        Navigation.NavigateTo("/login", true);
    }

    private async Task HandleRegisterAsync()
    {
        {
            try
            {
                var userToCreate = new UserCreateRequestDto
                {
                    FullName = UserName,
                    Cpf = UserCpf,
                    Email = UserEmail,
                    PasswordHash = UserPassword,
                    Role = Role.Cliente
                };

                var result = await ApiBackend.PostAsync<UserCreateRequestDto>("users/register", userToCreate);

                if (result == null)
                {
                    Message = "Erro ao cadastrar usuário. Tente novamente.";
                    IsSuccess = false;
                    this.StateHasChanged();
                    return;
                }

                Message = "Usuário cadastrado com sucesso! Redirecionando para o login...";
                IsSuccess = true;
                this.StateHasChanged();

                await Task.Delay(1500);

                if (!string.IsNullOrWhiteSpace(RedirectIfSuccess))
                {
                    Navigation.NavigateTo(RedirectIfSuccess, true);
                    return;
                }

                Navigation.NavigateTo("/login", true);
            }
            catch (Exception ex)
            {
                throw new Exception($"Erro ao cadastrar usuário: {ex.Message}");
            }
        }
    }
}


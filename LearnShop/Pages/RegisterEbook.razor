@page "/cadastrar/ebook"
@using LearnShop.ClientServices.Auth
@using LearnShop.Helpers
@using LearnShop.Model.Enums
@using LearnShop.Model.Products
@inject NavigationManager Navigation
@inject AuthenticationService AuthService;

<PageTitle>Cadastrar E-book para venda</PageTitle>
<PageHeader Title="CADASTRAR E-BOOK" TextSize="2xl"/>

<AuthorizedView AllowedRoles="@(new [] { Role.Admin })">
<div class="container flex flex-col items-center justify-center gap-3 px-3 py-4 mx-auto h-full">
    <div
        class="flex flex-col items-center justify-center bg-gradient-to-br from-blue-400 to-green-600 border rounded-md mt-3 mb-3 min-w-[90vw] min-h-[70vh] md:min-w-[50vw] lg:min-w-[35vw]">
        <div
            class="flex flex-col justify-center rounded-md w-[80vw] min-h-[50vh] bg-white mt-3 mb-3 md:w-[40vw] lg:w-[20vw]">
            <Input Label="Título" Type="text" Id="title" @bind-Value="EbookName"
                   Placeholder="Digite o nome do E-book"/>

            <Input Label="Descrição" Type="text" Id="description" @bind-Value="EbookDescription"
                   Placeholder="Digite a descrição do E-book"/>
            
            <Input Label="Autor" Type="text" Id="author" @bind-Value="EbookAuthor"
                   Placeholder="Digite o autor do E-book"/>

            <div class="mb-4">
                <label for="ebookCategory" class="block text-center fw-bold text-md font-medium text-gray-700 mb-2">
                    Categoria
                </label>
                <select @bind="EbookCategory" id="ebookCategory"
                        class="mt-1 block w-auto mx-auto px-3 py-2 bg-white border border-gray-300 rounded-md text-sm shadow-sm text-center focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500">
                    <option value="">Selecione uma categoria</option>
                    <option value="Algoritmos">Algoritmos</option>
                    <option value="Banco de Dados">Banco de Dados</option>
                    <option value="Desenvolvimento Web">Desenvolvimento Web</option>
                    <option value="Desenvolvimento Mobile">Desenvolvimento Mobile</option>
                    <option value="Engenharia de Software">Engenharia de Software</option>
                </select>
            </div>

            <Input Label="Editora" Type="text" Id="publisher" @bind-Value="EbookPublisher"
                   Placeholder="Digite a editora do E-book"/>

            <Input Label="Preço" Type="number-pad" Id="price" @bind-Value="EbookPrice"
                   Placeholder="Digite o preço do E-book"/>

            <div class="mb-4">
                <Input Label="Imagem da Capa" Type="text" Id="ebookImageUrl" @bind-Value="EbookImageUrl"
                       Placeholder="https://link-imagem.com"/>
                <p class="mt-1 text-sm text-center text-gray-500">Deixe em branco para usar uma imagem aleatória</p>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div
                class="@(IsSuccess ? "bg-green-100 border-green-400 text-green-700" : "bg-red-100 border-red-400 text-red-700") px-3 py-3 rounded relative mb-4"
                role="alert">
                <span class="block sm:inline">@Message</span>
            </div>
        }

        <div class="flex items-center justify-center bg-transparent mt-5 mb-5">
            <Button Text="Cadastrar" Icon="add" TextColor="#FFF" BackgroundColor="#151773"
                    HoverBackgroundColor="#23238a" Size="md" Width="min-w-[125px]" PreventDefaultStatus=true
                    OnClick="HandleRegisterEbook"/>
        </div>
    </div>
</div>
</AuthorizedView>
}

@code {
    private string? EbookName;
    private string? EbookDescription;
    private string? EbookAuthor;
    private string? EbookCategory;
    private string? EbookPublisher;
    private string? EbookPrice;
    private string? EbookImageUrl;
    private string? Message;
    private bool IsSuccess;
    
    private async Task HandleRegisterEbook()
    {
        if (string.IsNullOrEmpty(EbookName))
        {
            Message = "É necessário informar o título do e-book.";
            IsSuccess = false;
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(EbookAuthor))
        {
            Message = "É necessário informar o autor do e-book.";
            IsSuccess = false;
            StateHasChanged();
            return;
        }

        if (!decimal.TryParse(EbookPrice, out var price) || price <= 0)
        {
            Message = "É necessário informar um preço válido.";
            IsSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            var ebook = new Ebook
            {
                Title = EbookName,
                Description = EbookDescription ?? "",
                Author = EbookAuthor,
                Category = EbookCategory ?? "",
                Publisher = EbookPublisher ?? "",
                Price = price,
                ImageUrl = !string.IsNullOrEmpty(EbookImageUrl)
                    ? EbookImageUrl
                    : GenerateRandomBookCover()
            };

            var result = await ApiBackend.PostAsync<Ebook>("ebooks", ebook);

            if (result != null)
            {
                Message = "E-book cadastrado com sucesso!";
                IsSuccess = true;
                StateHasChanged();

                await Task.Delay(1000);
                Navigation.NavigateTo("cadastrar/ebook", true);
            }
        }
        catch (Exception ex)
        {
            Message = $"Erro ao cadastrar e-book: {ex.Message}";
            IsSuccess = false;
            StateHasChanged();
        }
    }

    private string GenerateRandomBookCover()
    {
        var bookCovers = new[]
        {
            "https://picsum.photos/200/300?random=1",
            "https://picsum.photos/200/300?random=2",
            "https://picsum.photos/200/300?random=3",
            "https://picsum.photos/200/300?random=4",
            "https://picsum.photos/200/300?random=5",
            "https://covers.openlibrary.org/b/id/8225261-M.jpg",
            "https://covers.openlibrary.org/b/id/10909258-M.jpg",
            "https://covers.openlibrary.org/b/id/12583098-M.jpg"
        };

        var random = new Random();
        return bookCovers[random.Next(bookCovers.Length)];
    }

}

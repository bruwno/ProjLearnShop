@page "/login"
@using LearnShop.ClientServices.Interfaces
@using LearnShop.Dto.RequestDtos
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<PageHeader Title="LOGIN" TextSize="2xl" />

<div class="container flex flex-col items-center justify-center gap-3 px-3 py-4 mx-auto">
    <div class="w-full max-w-md flex flex-col items-center justify-center bg-gradient-to-br from-blue-400 to-green-600 border rounded-2xl min-w-[90vw] min-h-[55vh] md:min-w-[40vw] lg:min-w-[25vw]">
        <div class="flex flex-col justify-center rounded-2xl w-[60vw] min-h-[30vh] bg-white  md:w-[20vw] lg:w-[20vw]">
            <Input Label="Login" Type="text" Id="login" @bind-Value="userLogin" Placeholder="Digite seu login" />

            <Input Label="Password" Type="password" Id="password" @bind-Value="userPassword" Placeholder="Digite sua senha" />
        </div>
            <div class="flex items-center justify-center bg-transparent mt-10">
                        <Button Text="Entrar" 
                                Icon="login" 
                                TextColor="#FFF" 
                                BackgroundColor="#151773"
                                HoverBackgroundColor="#23238a" 
                                Size="md" 
                                Width="min-w-[125px]"
                                PreventDefaultStatus=true
                                OnClick="HandleLoginAsync" />
            </div>
    </div>
</div>

@code {
    private string? userLogin;
    private string? userPassword;
    private string? errorMessage;
    private bool isProcessing = false;
    
    private async Task HandleLoginAsync()
    {
        try
        {
            errorMessage = null;

            if (!ValidateForm())
                return;

            isProcessing = true;

            var userLoginRequest = new UserLoginRequestDto
            {
                Email = userLogin,
                Password = userPassword
            };

            var result = await UserService.LoginAsync(userLoginRequest);
            Console.WriteLine(result);

            if (result is not null)
            {
                NavigationManager.NavigateTo("/pedidos");
            }
            else
            {
                errorMessage = result.Token ?? "Erro ao realizar login. Verifique suas credenciais.";
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private bool ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(userLogin))
        {
            errorMessage = "O email é obrigatório.";
            return false;
        }
        
        if (string.IsNullOrWhiteSpace(userPassword))
        {
            errorMessage = "A senha é obrigatória.";
            return false;
        }
        
        return true;
    }
}
